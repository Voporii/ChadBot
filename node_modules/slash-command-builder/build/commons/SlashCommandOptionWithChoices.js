"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const SlashCommandOption_1 = __importDefault(require("./SlashCommandOption"));
class SlashCommandOptionWithChoices extends SlashCommandOption_1.default {
    constructor(type) {
        super(type);
        this.choices = [];
    }
    addChoice(name, value) {
        const maxItems = SlashCommandOptionWithChoices.MAX_ITEMS - 1;
        if (this.choices.length > maxItems) {
            throw new Error(`Choices cannot exceed ${SlashCommandOptionWithChoices.MAX_ITEMS} items`);
        }
        Reflect.set(this, 'choices', [
            ...this.choices,
            { name, value },
        ]);
        return this;
    }
    addChoices(choices) {
        if ((0, lodash_1.isEmpty)(choices) || !(0, lodash_1.isArray)(choices)) {
            throw new Error('The `value` parameter is not an array or is empty');
        }
        for (const { name, value } of choices) {
            this.addChoice(name, value);
        }
        return this;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            choices: this.choices,
        };
    }
}
exports.default = SlashCommandOptionWithChoices;
SlashCommandOptionWithChoices.MAX_ITEMS = 25;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xhc2hDb21tYW5kT3B0aW9uV2l0aENob2ljZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbW9ucy9TbGFzaENvbW1hbmRPcHRpb25XaXRoQ2hvaWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1DQUEwQztBQVMxQyw4RUFBc0Q7QUFXdEQsTUFBcUIsNkJBQXlELFNBQVEsNEJBQWtCO0lBR3RHLFlBQVksSUFBbUM7UUFDN0MsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBR0UsWUFBTyxHQUFtRCxFQUFFLENBQUM7SUFGN0UsQ0FBQztJQUlNLFNBQVMsQ0FBQyxJQUFZLEVBQUUsS0FBUTtRQUNyQyxNQUFNLFFBQVEsR0FBVyw2QkFBNkIsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBRXJFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsUUFBUSxFQUFFO1lBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLDZCQUE2QixDQUFDLFNBQVMsUUFBUSxDQUFDLENBQUM7U0FDM0Y7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7WUFDM0IsR0FBRyxJQUFJLENBQUMsT0FBTztZQUNmLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtTQUNoQixDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxVQUFVLENBQUMsT0FBMEI7UUFDMUMsSUFBSSxJQUFBLGdCQUFPLEVBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFBLGdCQUFPLEVBQUMsT0FBTyxDQUFDLEVBQUU7WUFDekMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsS0FBSyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLE9BQU8sRUFBRTtZQUNyQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM3QjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVlLE1BQU07UUFDcEIsT0FBTztZQUNMLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNqQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDdEIsQ0FBQztJQUNKLENBQUM7O0FBekNILGdEQTBDQztBQXpDeUIsdUNBQVMsR0FBVyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0FycmF5LCBpc0VtcHR5IH0gZnJvbSAnbG9kYXNoJztcclxuXHJcbmltcG9ydCB7XHJcbiAgQXBwbGljYXRpb25Db21tYW5kT3B0aW9uQ2hvaWNlU3RydWN0dXJlLFxyXG4gIEFwcGxpY2F0aW9uQ29tbWFuZE9wdGlvblN0cnVjdHVyZSxcclxuICBBcHBsaWNhdGlvbkNvbW1hbmRPcHRpb25UeXBlcyxcclxuICBDaG9pY2VzLFxyXG59IGZyb20gJy4uL2ludGVyZmFjZXMnO1xyXG5cclxuaW1wb3J0IFNsYXNoQ29tbWFuZE9wdGlvbiBmcm9tICcuL1NsYXNoQ29tbWFuZE9wdGlvbic7XHJcblxyXG4vKlxyXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxufCBTbGFzaENvbW1hbmRCdWlsZGVyOjpDb21tb25zIC0+IFNsYXNoQ29tbWFuZE9wdGlvbldpdGhDaG9pY2VzXHJcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG58XHJcbnwgLi4uXHJcbnxcclxuKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNsYXNoQ29tbWFuZE9wdGlvbldpdGhDaG9pY2VzPEEgZXh0ZW5kcyBudW1iZXIgfCBzdHJpbmc+IGV4dGVuZHMgU2xhc2hDb21tYW5kT3B0aW9uIHtcclxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNQVhfSVRFTVM6IG51bWJlciA9IDI1O1xyXG5cclxuICBjb25zdHJ1Y3Rvcih0eXBlOiBBcHBsaWNhdGlvbkNvbW1hbmRPcHRpb25UeXBlcykge1xyXG4gICAgc3VwZXIodHlwZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgY2hvaWNlczogQXJyYXk8QXBwbGljYXRpb25Db21tYW5kT3B0aW9uQ2hvaWNlU3RydWN0dXJlPiA9IFtdO1xyXG5cclxuICBwdWJsaWMgYWRkQ2hvaWNlKG5hbWU6IHN0cmluZywgdmFsdWU6IEEpOiB0aGlzIHtcclxuICAgIGNvbnN0IG1heEl0ZW1zOiBudW1iZXIgPSBTbGFzaENvbW1hbmRPcHRpb25XaXRoQ2hvaWNlcy5NQVhfSVRFTVMgLSAxO1xyXG5cclxuICAgIGlmICh0aGlzLmNob2ljZXMubGVuZ3RoID4gbWF4SXRlbXMpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDaG9pY2VzIGNhbm5vdCBleGNlZWQgJHtTbGFzaENvbW1hbmRPcHRpb25XaXRoQ2hvaWNlcy5NQVhfSVRFTVN9IGl0ZW1zYCk7XHJcbiAgICB9XHJcblxyXG4gICAgUmVmbGVjdC5zZXQodGhpcywgJ2Nob2ljZXMnLCBbXHJcbiAgICAgIC4uLnRoaXMuY2hvaWNlcyxcclxuICAgICAgeyBuYW1lLCB2YWx1ZSB9LFxyXG4gICAgXSk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkQ2hvaWNlcyhjaG9pY2VzOiBBcnJheTxDaG9pY2VzPEE+Pik6IHRoaXMge1xyXG4gICAgaWYgKGlzRW1wdHkoY2hvaWNlcykgfHwgIWlzQXJyYXkoY2hvaWNlcykpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYHZhbHVlYCBwYXJhbWV0ZXIgaXMgbm90IGFuIGFycmF5IG9yIGlzIGVtcHR5Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCB7IG5hbWUsIHZhbHVlIH0gb2YgY2hvaWNlcykge1xyXG4gICAgICB0aGlzLmFkZENob2ljZShuYW1lLCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgdG9KU09OKCk6IEFwcGxpY2F0aW9uQ29tbWFuZE9wdGlvblN0cnVjdHVyZSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5zdXBlci50b0pTT04oKSxcclxuICAgICAgY2hvaWNlczogdGhpcy5jaG9pY2VzLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19