"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlashCommandBuilder = exports.SlashCommandSubcommandGroup = exports.SlashCommandSubcommand = void 0;
const lodash_1 = require("lodash");
const interfaces_1 = require("./interfaces");
const SlashCommandMethods_1 = __importDefault(require("./commons/SlashCommandMethods"));
class SlashCommandSubcommand extends SlashCommandMethods_1.default {
    constructor() {
        super(...arguments);
        this.type = interfaces_1.ApplicationCommandOptionTypes.Subcommand;
        this.name = '';
        this.description = '';
    }
    setName(value) {
        Reflect.set(this, 'name', value);
        return this;
    }
    setDescription(value) {
        Reflect.set(this, 'description', value);
        return this;
    }
    toJSON() {
        if ((0, lodash_1.isUndefined)(this.type)) {
            throw new Error('The `type` parameter should not be empty');
        }
        const response = {
            type: this.type,
            name: this.name,
            description: this.description,
            options: this.options,
        };
        return response;
    }
}
exports.SlashCommandSubcommand = SlashCommandSubcommand;
class SlashCommandSubcommandGroup {
    constructor() {
        this.type = interfaces_1.ApplicationCommandOptionTypes.SubcommandGroup;
        this.name = '';
        this.description = '';
        this.options = [];
    }
    setName(value) {
        Reflect.set(this, 'name', value);
        return this;
    }
    setDescription(value) {
        Reflect.set(this, 'description', value);
        return this;
    }
    addSubcommand(callback) {
        this.options.push(callback(new SlashCommandSubcommand()).toJSON());
        return this;
    }
    toJSON() {
        if ((0, lodash_1.isUndefined)(this.type)) {
            throw new Error('The `type` parameter should not be empty');
        }
        const response = {
            type: this.type,
            name: this.name,
            description: this.description,
            options: this.options,
        };
        return response;
    }
}
exports.SlashCommandSubcommandGroup = SlashCommandSubcommandGroup;
class SlashCommandBuilder extends SlashCommandMethods_1.default {
    constructor() {
        super(...arguments);
        this.type = interfaces_1.ApplicationCommandTypes.ChatInput;
        this.name = '';
        this.description = '';
        this.defaultPermission = true;
    }
    setType(value) {
        Reflect.set(this, 'type', value);
        return this;
    }
    setName(value) {
        Reflect.set(this, 'name', value);
        return this;
    }
    setDescription(value) {
        Reflect.set(this, 'description', value);
        return this;
    }
    setDefaultPermission(value) {
        Reflect.set(this, 'defaultPermission', value);
        return this;
    }
    addSubcommand(callback) {
        this.options.push(callback(new SlashCommandSubcommand()).toJSON());
        return this;
    }
    addSubcommandGroup(callback) {
        this.options.push(callback(new SlashCommandSubcommandGroup()).toJSON());
        return this;
    }
    toJSON() {
        return {
            type: this.type,
            name: this.name,
            description: this.description,
            options: this.options,
            default_permission: this.defaultPermission,
        };
    }
}
exports.SlashCommandBuilder = SlashCommandBuilder;
//# sourceMappingURL=data:application/json;base64,