"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const interfaces_1 = require("../interfaces");
const SlashCommandOption_1 = __importDefault(require("../commons/SlashCommandOption"));
const allowTypes = [
    interfaces_1.ChannelTypes.GUILD_TEXT,
    interfaces_1.ChannelTypes.DM,
    interfaces_1.ChannelTypes.GUILD_VOICE,
    interfaces_1.ChannelTypes.GROUP_DM,
    interfaces_1.ChannelTypes.GUILD_CATEGORY,
    interfaces_1.ChannelTypes.GUILD_NEWS,
    interfaces_1.ChannelTypes.GUILD_STORE,
    interfaces_1.ChannelTypes.GUILD_NEWS_THREAD,
    interfaces_1.ChannelTypes.GUILD_PUBLIC_THREAD,
    interfaces_1.ChannelTypes.GUILD_PRIVATE_THREAD,
    interfaces_1.ChannelTypes.GUILD_STAGE_VOICE,
];
class SlashCommandChannelOption extends SlashCommandOption_1.default {
    constructor() {
        super(interfaces_1.ApplicationCommandOptionTypes.Channel);
        this.type = interfaces_1.ApplicationCommandOptionTypes.Channel;
        this.channelTypes = [];
    }
    addFilterBy(value) {
        let deny = true;
        if ((0, lodash_1.isArray)(value)) {
            deny = (0, lodash_1.isEmpty)(value);
        }
        else {
            deny = !(0, lodash_1.isNumber)(value);
        }
        if (deny) {
            throw new Error('The `value` parameter is not an array/ChannelType or is empty');
        }
        if ((0, lodash_1.isArray)(value)) {
            for (const item of value) {
                if (!this.channelTypes.includes(item)) {
                    if (!this.checkType(item)) {
                        break;
                    }
                    this.channelTypes.push(item);
                }
            }
        }
        else if (!this.channelTypes.includes(value)) {
            if (!this.checkType(value)) {
                return this;
            }
            this.channelTypes.push(value);
        }
        return this;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            channel_types: this.channelTypes,
        };
    }
    checkType(type) {
        let validate = allowTypes.includes(type);
        if (!validate) {
            throw new Error('The `value` parameter is not a ChannelType');
        }
        return validate;
    }
}
exports.default = SlashCommandChannelOption;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xhc2hDb21tYW5kQ2hhbm5lbE9wdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vcHRpb25zL1NsYXNoQ29tbWFuZENoYW5uZWxPcHRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtQ0FBb0Q7QUFFcEQsOENBSXVCO0FBRXZCLHVGQUErRDtBQVcvRCxNQUFNLFVBQVUsR0FBa0I7SUFDaEMseUJBQVksQ0FBQyxVQUFVO0lBQ3ZCLHlCQUFZLENBQUMsRUFBRTtJQUNmLHlCQUFZLENBQUMsV0FBVztJQUN4Qix5QkFBWSxDQUFDLFFBQVE7SUFDckIseUJBQVksQ0FBQyxjQUFjO0lBQzNCLHlCQUFZLENBQUMsVUFBVTtJQUN2Qix5QkFBWSxDQUFDLFdBQVc7SUFDeEIseUJBQVksQ0FBQyxpQkFBaUI7SUFDOUIseUJBQVksQ0FBQyxtQkFBbUI7SUFDaEMseUJBQVksQ0FBQyxvQkFBb0I7SUFDakMseUJBQVksQ0FBQyxpQkFBaUI7Q0FDL0IsQ0FBQztBQUVGLE1BQXFCLHlCQUEwQixTQUFRLDRCQUFrQjtJQUl2RTtRQUNFLEtBQUssQ0FBQywwQ0FBNkIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUp0QixTQUFJLEdBQUcsMENBQTZCLENBQUMsT0FBTyxDQUFDO1FBQ3RELGlCQUFZLEdBQXdCLEVBQUUsQ0FBQztJQUl2RCxDQUFDO0lBRU0sV0FBVyxDQUFDLEtBQXdDO1FBQ3pELElBQUksSUFBSSxHQUFZLElBQUksQ0FBQztRQUV6QixJQUFJLElBQUEsZ0JBQU8sRUFBQyxLQUFLLENBQUMsRUFBRTtZQUNsQixJQUFJLEdBQUcsSUFBQSxnQkFBTyxFQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxJQUFJLEdBQUcsQ0FBQyxJQUFBLGlCQUFRLEVBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7UUFFRCxJQUFJLElBQUksRUFBRTtZQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsK0RBQStELENBQUMsQ0FBQztTQUNsRjtRQUVELElBQUksSUFBQSxnQkFBTyxFQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2xCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO2dCQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUN6QixNQUFNO3FCQUNQO29CQUVELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUM5QjthQUNGO1NBQ0Y7YUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzFCLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFFRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVlLE1BQU07UUFDcEIsT0FBTztZQUNMLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNqQixhQUFhLEVBQUUsSUFBSSxDQUFDLFlBQVk7U0FDakMsQ0FBQztJQUNKLENBQUM7SUFFTyxTQUFTLENBQUMsSUFBa0I7UUFDbEMsSUFBSSxRQUFRLEdBQVksVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVsRCxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1NBQy9EO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztDQUNGO0FBMURELDRDQTBEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQXJyYXksIGlzRW1wdHksIGlzTnVtYmVyIH0gZnJvbSAnbG9kYXNoJztcclxuXHJcbmltcG9ydCB7XHJcbiAgQXBwbGljYXRpb25Db21tYW5kT3B0aW9uU3RydWN0dXJlLFxyXG4gIEFwcGxpY2F0aW9uQ29tbWFuZE9wdGlvblR5cGVzLFxyXG4gIENoYW5uZWxUeXBlcyxcclxufSBmcm9tICcuLi9pbnRlcmZhY2VzJztcclxuXHJcbmltcG9ydCBTbGFzaENvbW1hbmRPcHRpb24gZnJvbSAnLi4vY29tbW9ucy9TbGFzaENvbW1hbmRPcHRpb24nO1xyXG5cclxuLypcclxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbnwgU2xhc2hDb21tYW5kQnVpbGRlcjo6T3B0aW9ucyAtPiBTbGFzaENvbW1hbmRDaGFubmVsT3B0aW9uXHJcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG58XHJcbnwgLi4uXHJcbnxcclxuKi9cclxuXHJcbmNvbnN0IGFsbG93VHlwZXM6IEFycmF5PG51bWJlcj4gPSBbXHJcbiAgQ2hhbm5lbFR5cGVzLkdVSUxEX1RFWFQsXHJcbiAgQ2hhbm5lbFR5cGVzLkRNLFxyXG4gIENoYW5uZWxUeXBlcy5HVUlMRF9WT0lDRSxcclxuICBDaGFubmVsVHlwZXMuR1JPVVBfRE0sXHJcbiAgQ2hhbm5lbFR5cGVzLkdVSUxEX0NBVEVHT1JZLFxyXG4gIENoYW5uZWxUeXBlcy5HVUlMRF9ORVdTLFxyXG4gIENoYW5uZWxUeXBlcy5HVUlMRF9TVE9SRSxcclxuICBDaGFubmVsVHlwZXMuR1VJTERfTkVXU19USFJFQUQsXHJcbiAgQ2hhbm5lbFR5cGVzLkdVSUxEX1BVQkxJQ19USFJFQUQsXHJcbiAgQ2hhbm5lbFR5cGVzLkdVSUxEX1BSSVZBVEVfVEhSRUFELFxyXG4gIENoYW5uZWxUeXBlcy5HVUlMRF9TVEFHRV9WT0lDRSxcclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNsYXNoQ29tbWFuZENoYW5uZWxPcHRpb24gZXh0ZW5kcyBTbGFzaENvbW1hbmRPcHRpb24ge1xyXG4gIHB1YmxpYyBvdmVycmlkZSByZWFkb25seSB0eXBlID0gQXBwbGljYXRpb25Db21tYW5kT3B0aW9uVHlwZXMuQ2hhbm5lbDtcclxuICBwdWJsaWMgcmVhZG9ubHkgY2hhbm5lbFR5cGVzOiBBcnJheTxDaGFubmVsVHlwZXM+ID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoQXBwbGljYXRpb25Db21tYW5kT3B0aW9uVHlwZXMuQ2hhbm5lbCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkRmlsdGVyQnkodmFsdWU6IEFycmF5PENoYW5uZWxUeXBlcz58IENoYW5uZWxUeXBlcyk6IHRoaXMge1xyXG4gICAgbGV0IGRlbnk6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICBkZW55ID0gaXNFbXB0eSh2YWx1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkZW55ID0gIWlzTnVtYmVyKHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGVueSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgdmFsdWVgIHBhcmFtZXRlciBpcyBub3QgYW4gYXJyYXkvQ2hhbm5lbFR5cGUgb3IgaXMgZW1wdHknKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNoYW5uZWxUeXBlcy5pbmNsdWRlcyhpdGVtKSkge1xyXG4gICAgICAgICAgaWYgKCF0aGlzLmNoZWNrVHlwZShpdGVtKSkge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aGlzLmNoYW5uZWxUeXBlcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICghdGhpcy5jaGFubmVsVHlwZXMuaW5jbHVkZXModmFsdWUpKSB7XHJcbiAgICAgIGlmICghdGhpcy5jaGVja1R5cGUodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuY2hhbm5lbFR5cGVzLnB1c2godmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIHRvSlNPTigpOiBBcHBsaWNhdGlvbkNvbW1hbmRPcHRpb25TdHJ1Y3R1cmUge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uc3VwZXIudG9KU09OKCksXHJcbiAgICAgIGNoYW5uZWxfdHlwZXM6IHRoaXMuY2hhbm5lbFR5cGVzLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tUeXBlKHR5cGU6IENoYW5uZWxUeXBlcyk6IGJvb2xlYW4ge1xyXG4gICAgbGV0IHZhbGlkYXRlOiBib29sZWFuID0gYWxsb3dUeXBlcy5pbmNsdWRlcyh0eXBlKTtcclxuXHJcbiAgICBpZiAoIXZhbGlkYXRlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGB2YWx1ZWAgcGFyYW1ldGVyIGlzIG5vdCBhIENoYW5uZWxUeXBlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZhbGlkYXRlO1xyXG4gIH1cclxufVxyXG4iXX0=